// ZiaCoin Genesis C++ Configuration
// Genesis block parameters for ZiaCoin
const char* genesis_msg = "The beginning of ZiaCoin - 2025-05-26";
const CScript genesis_script = CScript() << ParseHex("04a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b0") << OP_CHECKSIG;

CBlock genesis = CreateGenesisBlock(
    genesis_msg,
    genesis_script,
    1748266632,    // Timestamp: 2025-05-26
    36609,   // Nonce
    0x207fffff, // nBits
    1,          // nVersion
    50 * COIN   // genesisReward
);

consensus.hashGenesisBlock = genesis.GetHash();
assert(consensus.hashGenesisBlock == uint256{"0000bd09b265eb539c6078fa2e65d11f5b9ca87ff6270f6c3cbc000d5e9e9b95"});
assert(genesis.hashMerkleRoot == uint256{"cd876e014d18f9e803e08865bab32f1a79943fcd0f189ae3e9e4e370568b9a43"});
bech32_hrp = "zia";

// Base58 prefixes
base58Prefixes[PUBKEY_ADDRESS] = std::vector<unsigned char>(1, 65);
base58Prefixes[SCRIPT_ADDRESS] = std::vector<unsigned char>(1, 125);
base58Prefixes[SECRET_KEY]     = std::vector<unsigned char>(1, 212);

// Default Ports
case ChainType::MAINNET: return std::make_unique<CBaseChainParams>("", 9888);
case ChainType::TESTNET: return std::make_unique<CBaseChainParams>("testnet", 19888);
case ChainType::TESTNET4: return std::make_unique<CBaseChainParams>("testnet4", 18888);
case ChainType::SIGNET: return std::make_unique<CBaseChainParams>("signet", 17888);
case ChainType::REGTEST: return std::make_unique<CBaseChainParams>("regtest", 15888);
